// Code generated by sqlc. DO NOT EDIT.

package gorse

import (
	"fmt"
	"strings"
)

// Replace the nth occurrence of old in s by new.
func replaceNth(s, old, new string, n int) string {
	i := 0
	for m := 1; m <= n; m++ {
		x := strings.Index(s[i:], old)
		if x < 0 {
			break
		}
		i += x
		if m == n {
			return s[:i] + new + s[i+len(old):]
		}
		i += len(old)
	}
	return s
}

func repeatN(val, pattern string, n int) string {
	var patterns []string
	for i := 0; i < n; i++ {
		patterns = append(patterns, pattern)
	}
	return fmt.Sprintf(val, strings.Join(patterns, ","))
}

//items.sql   ListItemsByID
func stringSlice2interface(l []string) []interface{} {
	v := make([]interface{}, len(l))
	for i, val := range l {
		v[i] = val

	}
	return v
}

//if len(IDs)>65536,mysql will return error
func BatchRunstring(batch int, IDs []string, fn func([]string) error) error {
	for i := 0; i <= len(IDs)/batch; i++ {
		l := i * batch
		r := (i + 1) * batch
		if r > len(IDs) {
			r = len(IDs)
		}
		if r > l {
			batchIDs := IDs[l:r]
			if err := fn(batchIDs); err != nil {
				return err
			}
		}
	}
	return nil
}

//measurements.sql   ListMeasurements
func float64Slice2interface(l []float64) []interface{} {
	v := make([]interface{}, len(l))
	for i, val := range l {
		v[i] = val

	}
	return v
}

//if len(IDs)>65536,mysql will return error
func BatchRunfloat64(batch int, IDs []float64, fn func([]float64) error) error {
	for i := 0; i <= len(IDs)/batch; i++ {
		l := i * batch
		r := (i + 1) * batch
		if r > len(IDs) {
			r = len(IDs)
		}
		if r > l {
			batchIDs := IDs[l:r]
			if err := fn(batchIDs); err != nil {
				return err
			}
		}
	}
	return nil
}
