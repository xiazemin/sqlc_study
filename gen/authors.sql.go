// Code generated by sqlc. DO NOT EDIT.
// source: authors.sql

package gen

import (
	"context"
	"database/sql"
	"fmt"
)

const createAuthor = `-- name: CreateAuthor :execresult
INSERT INTO authors (
  id,name,bio
) VALUES (
  ?,?, ? 
)
`

type CreateAuthorParams struct {
	ID int32 `json:"id"`

	Name string `json:"name"`

	Bio sql.NullString `json:"bio"`
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (sql.Result, error) {

	createAuthor := createAuthor

	return q.db.ExecContext(ctx, createAuthor, arg.ID, arg.Name, arg.Bio)
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors
WHERE id = ?
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int32) error {

	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const deleteAuthorIn = `-- name: DeleteAuthorIn :exec
DELETE FROM authors
WHERE id in (?)
`

func (q *Queries) DeleteAuthorIn(ctx context.Context, id []int32) error {

	if len(id) <= 0 {
		return fmt.Errorf("id length is invalid")
	}
	param := "?"
	for i := 0; i < len(id)-1; i++ {
		param += ",?"
	}
	deleteAuthorIn := replaceNth(deleteAuthorIn, "(?)", "("+param+")", 1)

	_, err := q.db.ExecContext(ctx, deleteAuthorIn, int32Slice2interface(id)...)
	return err
}

const getAuthorsInCompany = `-- name: GetAuthorsInCompany :many
SELECT id, name, bio, company_id, size FROM authors where company_id in ( select id from company where id in (?) and name in (?) )
`

type GetAuthorsInCompanyParams struct {
	ID []int32 `json:"id"`

	Name []string `json:"name"`
}

func (q *Queries) GetAuthorsInCompany(ctx context.Context, arg GetAuthorsInCompanyParams) ([]Author, error) {

	getAuthorsInCompany := getAuthorsInCompany

	if len(arg.ID) <= 0 {
		return nil, fmt.Errorf("arg.ID length is invalid")
	}
	{
		param := "?"
		for i := 0; i < len(arg.ID)-1; i++ {
			param += ",?"
		}
		getAuthorsInCompany = replaceNth(getAuthorsInCompany, "(?)", "("+param+")", 1)
	}

	if len(arg.Name) <= 0 {
		return nil, fmt.Errorf("arg.Name length is invalid")
	}
	{
		param := "?"
		for i := 0; i < len(arg.Name)-1; i++ {
			param += ",?"
		}
		getAuthorsInCompany = replaceNth(getAuthorsInCompany, "(?)", "("+param+")", 1)
	}

	rows, err := q.db.QueryContext(ctx, getAuthorsInCompany, append(int32Slice2interface(arg.ID), stringSlice2interface(arg.Name)...)...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Bio,
			&i.CompanyID,
			&i.Size,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuthorsInCompanyById = `-- name: GetAuthorsInCompanyById :many
SELECT id, name, bio, company_id, size FROM authors where company_id in ( select id from company where id in (?) )
`

func (q *Queries) GetAuthorsInCompanyById(ctx context.Context, id []int32) ([]Author, error) {

	if len(id) <= 0 {
		return nil, fmt.Errorf("id length is invalid")
	}
	param := "?"
	for i := 0; i < len(id)-1; i++ {
		param += ",?"
	}
	getAuthorsInCompanyById := replaceNth(getAuthorsInCompanyById, "(?)", "("+param+")", 1)

	rows, err := q.db.QueryContext(ctx, getAuthorsInCompanyById, int32Slice2interface(id)...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Bio,
			&i.CompanyID,
			&i.Size,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuthorsInOneCompany = `-- name: GetAuthorsInOneCompany :many
SELECT id, name, bio, company_id, size FROM authors where company_id in ( select id from company where id = ? )
`

func (q *Queries) GetAuthorsInOneCompany(ctx context.Context, id int32) ([]Author, error) {

	rows, err := q.db.QueryContext(ctx, getAuthorsInOneCompany, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Bio,
			&i.CompanyID,
			&i.Size,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneAuthor = `-- name: GetOneAuthor :one
SELECT id, name, bio, company_id, size FROM authors where  id in (?)  and bio=? and  name in (?) and company_id in (?) limit 1
`

type GetOneAuthorParams struct {
	ID []int32 `json:"id"`

	Bio sql.NullString `json:"bio"`

	Name []string `json:"name"`

	CompanyID []int32 `json:"company_id"`
}

func (q *Queries) GetOneAuthor(ctx context.Context, arg GetOneAuthorParams) (Author, error) {

	getOneAuthor := getOneAuthor

	if len(arg.ID) <= 0 {
		return Author{}, fmt.Errorf("arg.ID length is invalid")
	}
	{
		param := "?"
		for i := 0; i < len(arg.ID)-1; i++ {
			param += ",?"
		}
		getOneAuthor = replaceNth(getOneAuthor, "(?)", "("+param+")", 1)
	}

	if len(arg.Name) <= 0 {
		return Author{}, fmt.Errorf("arg.Name length is invalid")
	}
	{
		param := "?"
		for i := 0; i < len(arg.Name)-1; i++ {
			param += ",?"
		}
		getOneAuthor = replaceNth(getOneAuthor, "(?)", "("+param+")", 1)
	}

	if len(arg.CompanyID) <= 0 {
		return Author{}, fmt.Errorf("arg.CompanyID length is invalid")
	}
	{
		param := "?"
		for i := 0; i < len(arg.CompanyID)-1; i++ {
			param += ",?"
		}
		getOneAuthor = replaceNth(getOneAuthor, "(?)", "("+param+")", 1)
	}

	row := q.db.QueryRowContext(ctx, getOneAuthor, append(append(append(int32Slice2interface(arg.ID), arg.Bio), stringSlice2interface(arg.Name)...), int32Slice2interface(arg.CompanyID)...)...)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.CompanyID,
		&i.Size,
	)
	return i, err
}

const getTotalSize = `-- name: GetTotalSize :one
SELECT sum(size) from authors WHERE id in (?)
`

func (q *Queries) GetTotalSize(ctx context.Context, id []int32) (int64, error) {

	if len(id) <= 0 {
		return 0, fmt.Errorf("id length is invalid")
	}
	param := "?"
	for i := 0; i < len(id)-1; i++ {
		param += ",?"
	}
	getTotalSize := replaceNth(getTotalSize, "(?)", "("+param+")", 1)

	row := q.db.QueryRowContext(ctx, getTotalSize, int32Slice2interface(id)...)
	var sum int64
	err := row.Scan(&sum)
	return sum, err
}

const listAllAuthors = `-- name: ListAllAuthors :many
SELECT id, name, bio, company_id, size FROM authors
ORDER BY name
`

func (q *Queries) ListAllAuthors(ctx context.Context) ([]Author, error) {

	rows, err := q.db.QueryContext(ctx, listAllAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Bio,
			&i.CompanyID,
			&i.Size,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, name, bio, company_id, size FROM authors where  bio=? and id in (?)  and name in (?)  ORDER BY name
`

type ListAuthorsParams struct {
	Bio sql.NullString `json:"bio"`

	ID []int32 `json:"id"`

	Name []string `json:"name"`
}

func (q *Queries) ListAuthors(ctx context.Context, arg ListAuthorsParams) ([]Author, error) {

	listAuthors := listAuthors

	if len(arg.ID) <= 0 {
		return nil, fmt.Errorf("arg.ID length is invalid")
	}
	{
		param := "?"
		for i := 0; i < len(arg.ID)-1; i++ {
			param += ",?"
		}
		listAuthors = replaceNth(listAuthors, "(?)", "("+param+")", 1)
	}

	if len(arg.Name) <= 0 {
		return nil, fmt.Errorf("arg.Name length is invalid")
	}
	{
		param := "?"
		for i := 0; i < len(arg.Name)-1; i++ {
			param += ",?"
		}
		listAuthors = replaceNth(listAuthors, "(?)", "("+param+")", 1)
	}

	rows, err := q.db.QueryContext(ctx, listAuthors, append(append([]interface{}{arg.Bio}, int32Slice2interface(arg.ID)...), stringSlice2interface(arg.Name)...)...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Bio,
			&i.CompanyID,
			&i.Size,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
