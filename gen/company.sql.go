// Code generated by sqlc. DO NOT EDIT.
// source: company.sql

package gen

import (
	"context"
	"database/sql"
	"fmt"
)

const getCompanyName = `-- name: GetCompanyName :one
select companyName from company where companyName =?
`

func (q *Queries) GetCompanyName(ctx context.Context, companyname sql.NullString) (sql.NullString, error) {

	row := q.db.QueryRowContext(ctx, getCompanyName, companyname)
	var companyName sql.NullString
	err := row.Scan(&companyName)
	return companyName, err
}

const getMaxCompanyID = `-- name: GetMaxCompanyID :one
SELECT MAX(id) FROM company
`

func (q *Queries) GetMaxCompanyID(ctx context.Context) (sql.NullInt32, error) {

	row := q.db.QueryRowContext(ctx, getMaxCompanyID)
	var max sql.NullInt32
	err := row.Scan(&max)
	return max, err
}

const insertMulti = `-- name: InsertMulti :execresult
insert into company (id,name,companyName) VALUES %s
`

type InsertMultiParams struct {
	ID int32 `json:"id"`

	Name string `json:"name"`

	CompanyName sql.NullString `json:"companyName"`
}

func (q *Queries) InsertMulti(ctx context.Context, arg []InsertMultiParams) (sql.Result, error) {

	insertMulti := repeatN(insertMulti, "(?,?,?))", len(arg))
	var args []interface{}
	for i := 0; i < len(arg); i++ {
		args = append(args, arg[i].ID)
		args = append(args, arg[i].Name)
		args = append(args, arg[i].CompanyName)
	}
	return q.db.ExecContext(ctx, insertMulti, args...)
}

const listCompanyById = `-- name: ListCompanyById :many
select id, name, companyName from company where id in (?)
`

func (q *Queries) ListCompanyById(ctx context.Context, id []int32) ([]Company, error) {

	if len(id) <= 0 {
		return nil, fmt.Errorf("id length is invalid")
	}
	param := "?"
	for i := 0; i < len(id)-1; i++ {
		param += ",?"
	}
	listCompanyById := replaceNth(listCompanyById, "(?)", "( "+param+" )", 1)

	rows, err := q.db.QueryContext(ctx, listCompanyById, int32Slice2interface(id)...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(&i.ID, &i.Name, &i.CompanyName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
