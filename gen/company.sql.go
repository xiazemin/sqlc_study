// Code generated by sqlc. DO NOT EDIT.
// source: company.sql

package gen

import (
	"context"
	"database/sql"
)

const getCompanyName = `-- name: GetCompanyName :one
select companyName from company where companyName =?
`

func (q *Queries) GetCompanyName(ctx context.Context, companyname sql.NullString) (sql.NullString, error) {

	row := q.db.QueryRowContext(ctx, getCompanyName, companyname)
	var companyName sql.NullString
	err := row.Scan(&companyName)
	return companyName, err
}

const insertMulti = `-- name: InsertMulti :execresult
insert into company (id,name,companyName) values (?,?,?),(?,?,?)
`

type InsertMultiParams struct {
	ID int32 `json:"id"`

	Name string `json:"name"`

	CompanyName sql.NullString `json:"companyName"`

	ID_2 int32 `json:"id_2"`

	Name_2 string `json:"name_2"`

	CompanyName_2 sql.NullString `json:"companyName_2"`
}

func (q *Queries) InsertMulti(ctx context.Context, arg InsertMultiParams) (sql.Result, error) {

	insertMulti := insertMulti

	return q.db.ExecContext(ctx, insertMulti,
		arg.ID,
		arg.Name,
		arg.CompanyName,
		arg.ID_2,
		arg.Name_2,
		arg.CompanyName_2,
	)
}

const listCompanyById = `-- name: ListCompanyById :many
select id, name, companyName from company where id in (?)
`

func (q *Queries) ListCompanyById(ctx context.Context, id []int32) ([]Company, error) {

	if len(id) > 0 {
		param := "?"
		for i := 0; i < len(id)-1; i++ {
			param += ",?"
		}
		listCompanyById := replaceNth(listCompanyById, "(?)", "("+param+")", 1)
	}

	rows, err := q.db.QueryContext(ctx, listCompanyById, int32Slice2interface(id)...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(&i.ID, &i.Name, &i.CompanyName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
